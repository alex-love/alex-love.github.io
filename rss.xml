<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Alex Love's Personal Website]]></title><description><![CDATA[A small website for my personal portfolio and reflections on my learning.]]></description><link>null</link><generator>RSS for Node</generator><lastBuildDate>Thu, 04 Apr 2019 21:02:26 GMT</lastBuildDate><item><title><![CDATA[Reflections on my learning process: Programming and Computer Science]]></title><description><![CDATA[My History With CS and Programming It all began when I was a Junior in high school. Growing up, I spend a fair bit of time near computers…]]></description><link>null/reflections-on-the-process/</link><guid isPermaLink="false">null/reflections-on-the-process/</guid><pubDate>Tue, 19 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;My History With CS and Programming&lt;/h2&gt;
&lt;p&gt;It all began when I was a Junior in high school. Growing up, I spend a fair bit of time near computers. My Dad worked in software, so we always have a new computer around (always Macs). This created an interest in technology for me early on, and that interest still exists today. I’ll admit, the tech-centric mind of silicon valley contributed an indirect external pressure that I still don’t quite understand.&lt;/p&gt;
&lt;p&gt;At a certain point, I decided to enroll in a CS course in high-school. I think it was initially motivated by my Dad, but I don’t regret taking it. While my school was located in the heart of silicon valley (Palo Alto), we wouldn’t have an actual CS teacher at my school until the following year. For my first class it was just a proctor that oversaw us taking online community college classes. In total, I took 2 quarters worth of introductory CS classes for the year. They were taught in JAVA and progressed us through the basics of programming and more specifically, OOP/Events in JAVA. &lt;/p&gt;
&lt;h3&gt;My Initial Thoughts&lt;/h3&gt;
&lt;p&gt;Initially, nothing made sense. From my knowledge, we were writting basic code that was then compiled, which my computer would then ‘run’/interpret. These programs would usually output to the System, or when we got a little more advanced, display some data or text on a Swing panel/frame and possibly have a few editable fields with events tied to them. For me to truly learn something, I want to understand it on a fundamental level, at least conceptually. I also felt a strong sense of competitiveness between my peers and judged myself harshly for my perceived lack of knowledge. &lt;/p&gt;
&lt;p&gt;Initially I was interested, but I was deeply lost in the bigger picture. I felt insuperior to my seemingly smarter and more knowledgeable peers. My interest was there, but at the same time it was also being crushed by the feeling that trying to learn about this stuff was a lost cause for myself. &lt;strong&gt;&lt;em&gt;What I didn’t realize at the time was that a lot of my fellow classmates had parents who were engineers that were assisting them and tutoring them. More importantly, I later realized that I should focus on myself and not compare myself to others in that way.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some more advanced students around me were writing applications or more complex code, but I was limited to writing small example programs such as sorting algorithms from our coursework, or small text games. I knew that in order to do something more sophisticated there was a lot to learn, but I lacked a sense of direction and was unsure of what small steps in my learning I would need to take to one day make my own Apps or other pieces of software. I had a desire to build high quality software, but felt like I was decades away from the knowledge to do so. While discouraged, I still enrolled in APCS for the following school year.&lt;/p&gt;
&lt;h3&gt;APCS&lt;/h3&gt;
&lt;p&gt;My APCS course was largely useless in terms of direct learning. Whenever I have a bad/negative experience with something, I like to think about what I learned in regards to why I perceived the experience as negative. If I was the teacher, how would I have done things differently? With my further knowledge now, how would I have approached my learning differently? I’ll answer these questions soon.&lt;/p&gt;
&lt;h4&gt;Why the course was poorly taught&lt;/h4&gt;
&lt;p&gt;For context, my teacher was a proclaimed MIT PhD holder, he made sure to mention it to us. While his qualifications are largely irrelevent, they can perhaps provide some context into why he taught the course how he did. &lt;/p&gt;
&lt;p&gt;In general, we did not follow any conventional APCS curriculum, my teacher focused largely on advanced data structures such as trees, hashtables, etc… and neglected any standard curriculum. My first couple assignments in the class were to program some scalable visual graphics in Java’s standard swing library. He seemed to be concerned with trying to expose us to advanced material when we didn’t even know how to apply the more basic principles from the previous years coursework. Not to mention that we didn’t even discuss any of the basic, very important fundamentals of programming.&lt;/p&gt;
&lt;p&gt;So not only was I still lacking a general sense of direction or purpose for what I was learning, but I was only being thrust deeper into the rabbit hole, furthering my sense of self doubt and confusion. &lt;/p&gt;
&lt;h4&gt;What would I have done differently as teacher?&lt;/h4&gt;
&lt;p&gt;I think what would have helped me the most in my early stages of learning, would be to start creating programs early on. It’s important to learn from your mistakes, or find the need of a concept through your own projects. We got so dirty in the time complexity of algorithms (this was in highschool) before we even knew the motivation of such endevours. If we aren’t even close to capable of writing an application at scale that will benefit from performance optimization, what is the point of diving into math and algorithms that often aren’t taught until later in college? (I took a course on this sophomore year of college).&lt;/p&gt;
&lt;p&gt;If you want to motivate a student to learn as opposed to memorize, you need to inspire their curiousity and let the learning occur naturally. My most productive computer science learning has been through trying to solve and optimize my own problems in personal projects, not trying to implement an algorithm from a textbook. I appreciate and understand the usefullness, but early on students just need to code, learn from their mistakes, and apply the knowledge and concepts that they know so far. This inspires curiousity and further learning and also provides context and motivation for any previous learning. &lt;/p&gt;
&lt;p&gt;I also would have tried to teach the APCS curriculum. My class was essentially handed a test prep book a week or two before the exam and told to prepare for it. This led me to scoring a 3 on the exam which made me unable to recieve college credit. This required me to take intro CS again in college which ultimately was a poor use of my time. &lt;/p&gt;
&lt;h4&gt;How would I have liked to learn the material?&lt;/h4&gt;
&lt;p&gt;I think applied learning is one of the most fun and efficient ways to learn CS and programming. Whenever I work on a personal project, I usually learn a lot because one question leads to another. I try to solve one problem and realize that I need to know 3 different things which each require their own set of requirements themselves. While it can easily spiral out of control and lead you in an endless cycle of learning, simple projects are often able to teach you a lot while remainly less complex. I think well thought out projects that have just enough guidance to point you in the right direction would be beneficial to the learning of someone at any skill level.&lt;/p&gt;
&lt;p&gt;Personally, I’ve found that it’s hard to learn something purely for the sake of learning it. I like to use what I’ve learned and I like to learn what I’ll use. For example, I’m currently working on implementing my own form of account management because I’ve always felt a lack of knowledge in using databases as well as the security aspect of it. I want to understand how to optimally use a database for this purpose. If you had asked me 3 years ago what my interest in databases was, I would have said ‘minimal’, but now that I know what I want to use it for, I’m very interested in the topic.&lt;/p&gt;
&lt;h3&gt;What I would tell a complete beginner&lt;/h3&gt;
&lt;p&gt;If I could talk to my younger self I would say something along these lines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t compare yourself to others. At the end of the day all that matters is that you are progressing and learning. Someones always going to know more than you, but you can continue to learn. Only when you quit do you fail. It may take you 2 years to learn something that only took someone else 1 month, but as long as you don’t quit you will still get there. Make sure that you are learning through purpose and curiosity. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s important to have fun. Don’t do this just because you think you should. Do it because you want to. Do it because you are curious. Do it because you want to solve a problem, or make a game/app for your friends.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of this won’t make sense for a while. It may feel like you are learning something you’ll never use or fully understand, but eventually you will look back and realize the importance. Sometimes you won’t be able to immediately put the pieces together, but sometimes immediately putting the pieces together simply isn’t possible. Assuming you stick with it, you will look back and be proud of how far you have come, how much you now understand what once made no sense to you. You’ll still think you have so far to go, but you’re a lot closer than where you started purely because you stuck with it. Only if you quit would you have stopped learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you truly want to learn and become a better programmer, you need to work on it consistently. You also need to work on your own projects and write your own code. It’s easy to get stuck in a viscious cycle of following tutorials or reading on concepts. The sooner you get to making your own stuff, the quicker you will learn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Why I changed my major after 2 years of CS in college&lt;/h3&gt;
&lt;p&gt;In college I switched from being a CS major to an Econ major after 2 years. I was frustrated with the quality of the courses I was taking and annoyed that we never had any actual projects in any of my classes. My curiosity was beginning to fizzle, and I was deeply interested in the questions that Economics proposed. I felt that my time and intellectual curiosity would better be spent studying Economics. &lt;/p&gt;
&lt;p&gt;While this journey of learning has been long and confusing, ultimately I believe I made the correct choice. Studying Economics really helped advance my critical thinking and the way I solve and analyze a problem. At the same time, my CS experience was very useful in my problem solving process. I think the two went very well together for me and I left college feeling like I had learned quite a bit. &lt;/p&gt;
&lt;p&gt;At some point I would like to finish a CS degree, or pursue an advanced degree. Ultimately I was only about 2-3 semesters away from a traditional CS degree. While I feel like I have learned far more outside of college, there are still a few subjects that I believe formal coursework would benefit me, those being: operating systems, databases, and networking. I think some foundational knowledge in those subjects would benefit me and I intent to take courses if I find the right opportunity. &lt;/p&gt;
&lt;h3&gt;Final Reflection&lt;/h3&gt;
&lt;p&gt;My biggest struggle with programming is feeling like I’m learning too slowly. I think the easiest way for me to alleviate this concern is to look back at how far my knowledge has progressed since the previous period. For this post I’ll highlight the skills that I have learned since graduating college. While I don’t claim to be an expert in any of these skills, I’ve at least exposed myself to them.&lt;/p&gt;
&lt;h4&gt;HTML,CSS,JS&lt;/h4&gt;
&lt;p&gt;I’ve been working on websites and have really advanced my knowledge in these core web technologies. While I still feel like I have a lot to learn for all of them, I have a much better understanding of how the web works at a core level.&lt;/p&gt;
&lt;h4&gt;Wordpress and webhosting&lt;/h4&gt;
&lt;p&gt;At my job, I’ve worked with wordpress a lot. Personally I’ve noticed a lot of problems with our use of it and find that Wordpress sites often become outdated and full of bloat plugins and uncontrollable dependencies. Being relient on third-party plugins has always been a concern of mine. I also find that Wordpress often results in a lot of bottlenecking through db queries which has motivated me to learning about static-site generators, such as my website. &lt;/p&gt;
&lt;h4&gt;Git&lt;/h4&gt;
&lt;p&gt;In my personal projects I always use git for version control. I really only do basic operations and feature branching, since I am a one man show, but I have found the knowledge immensely useful for my develop workflow. &lt;/p&gt;
&lt;h4&gt;NPM/package managers&lt;/h4&gt;
&lt;p&gt;Package managers have been a gamechanger for me. Having a consistent environment/dependency structure has always been a confusion of mine, especially early on. Using npm has really made my life a lot easier and I use it everyday.&lt;/p&gt;
&lt;h4&gt;Node/Express, Python/Flask&lt;/h4&gt;
&lt;p&gt;The concept of web-servers was always a mystery to me. I had a general idea of what they were, but I really had no idea how they worked on a base level, or even in terms of implementation. I’ve spun up a few basic APIs with both express/flask and it really elevated my learning and understanding. &lt;/p&gt;
&lt;h4&gt;React&lt;/h4&gt;
&lt;p&gt;I’m still learning React, but it’s really helped me resolve my concern of how to implement web apps well. I like the component structure it provides and the lifecycle methods have been useful to me. I’ve been using it mostly out of curiousity as opposed to necessity, but I think it has improved my JS skills as well. I’ve made simple flashcard app that randomly displays GRE test words that I initially scraped from a website using Python.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Safeway Bagels in My Town are not Bagels]]></title><description><![CDATA[It’s time I take a stand on what is and is not a bagel 1. How do we define a bagel? According to  dictionary.com , a bagel is   a leavened…]]></description><link>null/safeway-bagels/</link><guid isPermaLink="false">null/safeway-bagels/</guid><pubDate>Sun, 10 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;It’s time I take a stand on what is and is not a bagel&lt;/h3&gt;
&lt;h4&gt;1. How do we define a bagel?&lt;/h4&gt;
&lt;p&gt;According to &lt;a href=&quot;https://www.dictionary.com/browse/bagel&quot;&gt;dictionary.com&lt;/a&gt;, a bagel is  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a leavened, doughnut-shaped, firm-textured roll, with a brownish
glazed surface, made of dough first poached and then baked.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, now that we are familiar with a basic definition of a bagel, I will proceed with my rant.  &lt;/p&gt;
&lt;h4&gt;Seo Intermission&lt;/h4&gt;
&lt;p&gt;Every good blog post that contains anything slightly resembling a recipe in any capacity needs to include a brief novel filled with keywords. The importance of this is so that Google leads you to my true bagel recipe later. See what I did there, I wrote about my super awesome bagels that I love to make. Here is the point in this paragraph where I admit that I’m a fraud… I’ve never actually made bagels. I’m just a huge bagel snob that believes that we need higher bagel standards in the great USA. We have fancy ketchup, a rating by the USDA that requires a certain tomato concentration, when will we have fancy bagels? I’m so worked up about this that I’m actually procrastinating my real life responsibilities. I’m so worked up that I’m going to go make my own bagels.  &lt;/p&gt;
&lt;p&gt;At this point, you’re fed up with me and frustrated that I’ve never even made bagels… It’s fine, I’m frustrated too. I’m going to make them today and I’ll include the recipe I use at the bottom. &lt;/p&gt;
&lt;h4&gt;2. I believe that Safeway bagels are not boiled&lt;/h4&gt;
&lt;p&gt;An important step in the bagel making process, I believe that Safeway does not boil their bagels. If my suspicion is true, Safeway bagels are simply bread in the shape of a bagel. You may be thinking “but bagels are bread”, and you are correct. Bagels are indeed bread, but just because Safeway makes bread does not mean that they make bagels. Bagels are bread, but not all bread is bagels. A basic logic course, or just common reasoning, will confirm this. &lt;/p&gt;
&lt;h2&gt;A Call To Action&lt;/h2&gt;
&lt;h4&gt;Spread the Bagel Love&lt;/h4&gt;
&lt;p&gt;Not everyone is fortunate enough to live somewhere with access to high quality and affordable bagels. Fortunately, bagels can be made from home with a bit of trial and error. &lt;/p&gt;
&lt;h4&gt;Bagel Basics, a Recipe&lt;/h4&gt;
&lt;h5&gt;Ingredients&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Flour&lt;/li&gt;
&lt;li&gt;Salt&lt;/li&gt;
&lt;li&gt;Yeast&lt;/li&gt;
&lt;li&gt;Barley malt syrup&lt;/li&gt;
&lt;li&gt;Oil&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A found this recipe on slate.com which reinforced my opinion about the need of malt syrup and boiling, so &lt;a href=&quot;https://slate.com/culture/2014/04/authentic-bagel-recipe-you-need-barley-malt-syrup-and-boiling-water.html&quot;&gt;this&lt;/a&gt; is the recipe I will be using.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yield: 10 to 12 bagels
4 cups all-purpose flour
2¼ teaspoons instant yeast or one ¼-ounce packet active dry yeast
2 teaspoons salt
¼ cup barley malt syrup
Oil for greasing the bowl and pan&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Combine the flour, yeast, and salt in a large bowl. Add 1½ cups warm water—about the same temperature as the inside of your wrist—and 2 tablespoons of the barley malt syrup. Stir with the dough-hook attachment of a stand mixer or by hand until combined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knead the dough with the dough-hook attachment of a stand mixer or by hand until it feels smooth and elastic, about 10 minutes, adding flour as necessary to keep the dough from sticking. Grease a large bowl (it’s fine to use the same one you mixed the dough in), add the dough, and turn it over to coat it lightly with oil or butter. Cover the bowl with a clean kitchen towel or plastic wrap, put it in a warm place, and let the dough rise until doubled in size, at least 1 hour and preferably overnight.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heat the oven to 425°F, and put 6 cups of water in a large pot over high heat. When it boils, add the remaining 2 tablespoons barley malt syrup and adjust the heat so it simmers steadily. Add three or four of the bagels to the boiling water and cook, turning once, until they are firm and golden, 1½ to 2 minutes. Remove the bagels from the pot with a slotted spoon and return them to the baking sheet. Repeat with the remaining uncooked bagels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bake the bagels until they are evenly browned, 25 to 30 minutes. Serve warm.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;p&gt;If you’ve made it this far, I’ll inform you that I did in fact make these bagels. Unfortunately the extent of my good news has ended. Aesthetically speaking, these bagels are the worst thing I’ve ever created in my life. My first grade painting of a coffee cup that looked like a splotch of brown on a piece of paper looks good compared to how these bagels turned out. &lt;/p&gt;
&lt;h4&gt;The important thing: Taste&lt;/h4&gt;
&lt;p&gt;Aesthetics aside, these bagels tasted better than they looked. In fact, I ate 4 bagels within a 24 hour time period (close to my record 6). &lt;/p&gt;
&lt;h4&gt;A conclusion&lt;/h4&gt;
&lt;p&gt;Not gonna lie, making these was a decent amount of effort. But if effort = bagels, it was worth it. For the first time in a long time I ate a true bagel, ugly but true. But life isn’t about good looking bagels (at least until I can make them), it’s about true bagels, and now we have that. I leave this experience hopeful and optimistic. After creating something so ugly, it’s only up from here. &lt;/p&gt;</content:encoded></item></channel></rss>